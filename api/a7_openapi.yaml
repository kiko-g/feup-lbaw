openapi: 3.0.0
info:
  description: "Web Resources Specification (A7) for TechCouncil."
  version: "1.0.0"
  title: "Tech Council LBAW"
  contact:
    email: up201706156@fe.up.pt

externalDocs:
  description: Full A7 artifact info here
  url: "https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/eap"

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/lbaw32/TechCouncil/1.0.0
  - description: "Production server"
    url: https://virtserver.swaggerhub.com/ffriande/TechCouncil/1.0.0
  - url: "http://lbaw2132-piu.lbaw-prod.fe.up.pt"

tags:
  - name: "M01: Authentication"
    description: "Web resources related to user authentication"
  - name: "M02: Individual Profile"
    description: "Web resources related to userâ€™s personal information"
  - name: "M03: Content viewing and searching"
    description: "Web resources related to viewing and searching content"
  - name: "M04: Content interaction"
    description: "Web resources related to interacting with contents"
  - name: "M05: Moderation"
    description: "Web resources related to the moderation of the platform"
  - name: "M06: Static Pages"
    description: "Web resources related to static pages"

paths:
  #########################
  #  M01: Authentication  #
  #########################
  /login:
    get:
      operationId: R101
      summary: "R101: Login Form"
      description: "Provide login form. Access: PUB"
      tags:
        - "M01: Authentication"
      responses:
        "200":
          description: "Ok. Show [UI04](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui04-login)"
    post:
      operationId: R102
      summary: "R102: Login Action"
      description: "Processes the login form submission. Access: PUB"
      tags:
        - "M01: Authentication"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "200":
          description: "Login successful. Redirect to [UI01](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui01-home)"
          headers:
            Response:
              schema:
                type: string
              examples:
                200Success:
                  description: "Successful authentication. Redirect to user profile."
                  value: "/home"
        "400":
          description: "Login Error. Stay in [UI04](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui04-login)."
          headers:
            Response:
              schema:
                type: string
              examples:
                400Error:
                  description: "Error in authentication. Credentials don't match any user."
                  value: "/home"

  /logout:
    post:
      operationId: R103
      summary: "R103: Logout Action"
      description: "Logout the current authenticated user. Access: USR, ADM"
      tags:
        - "M01: Authentication"
      responses:
        "200":
          description: "Redirect after processing logout."
          headers:
            Location:
              schema:
                type: string
              examples:
                200Success:
                  description: "Successful logout. Redirect to home."
                  value: "/login"

  /register:
    get:
      operationId: R104
      summary: "R104: Register Form"
      description: "Provide new user registration form. Access: PUB"
      tags:
        - "M01: Authentication"
      responses:
        "200":
          description: "OK. Show [UI05](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui05-register)"
    post:
      operationId: R105
      summary: "R105: Register Action"
      description: "Processes the new user registration form submission. Access: PUB"
      tags:
        - "M01: Authentication"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
              required:
                - email
                - username
                - password
      responses:
        "200":
          description: "Register successful. Redirect to [UI01](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui01-home)"
          headers:
            Response:
              schema:
                type: string
              examples:
                200Success:
                  description: "Authentication Success. Redirect to user profile."
                  value: "/home"
        "400":
          description: "Register Error. Stay in [UI04](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui04-login)."
          headers:
            Location:
              schema:
                type: string
              examples:
                400Error:
                  description: "Server error in registration."
                  value: "/home"

  /login/reset:
    get:
      operationId: R106
      summary: "R106: Reset Password Form"
      description: "Provide password reset form. Access: PUB"
      tags:
        - "M01: Authentication"
      responses:
        "200":
          description: "OK. Redirect to [UI15](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui15-recover-password)"
    post:
      operationId: R107
      summary: "R107: Reset Password Action"
      description: "Processes the password reset form submission. Access: PUB"
      tags:
        - "M01: Authentication"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
              required:
                - email
                - username
      responses:
        "200":
          description: "Reset successful. Redirect to [UI01](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui01-home)"
          headers:
            Response:
              schema:
                type: string
              examples:
                200Success:
                  description: "Authentication Success. Redirect to home page."
                  value: "/home"
        "400":
          description: "Reset Error. Redirect to [UI15](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui15-recover-password)"
          headers:
            Location:
              schema:
                type: string
              examples:
                400Error:
                  description: "Server error in password reset."
                  value: "/home"

  #############################
  #  M02: Individual Profile  #
  #############################
  /users/{user_id}:
    get:
      operationId: R201
      summary: "R201: Profile Page"
      description: "Present both the main content related to a user, and the account information. Access: PUB"
      tags:
        - "M02: Individual Profile"
      parameters:
        - name: user_id
          in: path
          description: Provided an unique id of a user, the main content related to the user will be fetched.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Ok. Show [UI10](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui10-profile)"

  /user_profile/{user_id}/profile_settings:
    get:
      operationId: R202
      summary: "R202: Profile Settings Page"
      description: "Present the settings related to the user account, allowing the user to edit account information and to delete the account. Access: USR"
      tags:
        - "M02: Individual Profile"
      parameters:
        - name: user_id
          in: path
          description: Provided an unique id of a user, the profile settings page is shown.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Ok. Show [UI11](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui11-profile-settings)"

  /user_profile/{user_id}/edit:
    post:
      operationId: R203
      summary: "R203: Edit profile info"
      description: "Edits the user info. Access: USR"
      tags:
        - "M02: Individual Profile"
      parameters:
        - name: user_id
          in: path
          description: Provided an unique id of a user, the edit action.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                password:
                  type: string
                bio:
                  type: string
      responses:
        "200":
          description: "Edit profile info successful. Stay in [UI11](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui11-profile-settings)."
          headers:
            Response:
              schema:
                type: string
              examples:
                200Success:
                  description: "Successful authentication. Redirect to user profile."
                  value: "/user_profile/edit"
        "400":
          description: "Edit profile failed. Stay in [UI11](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui11-profile-settings) and inform user of failure."
          headers:
            Response:
              schema:
                type: string
              examples:
                400Error:
                  description: "Error editing profile."
                  value: "/user_profile/edit"

  /api/user/{id}/report:
    post:
      operationId: R204
      summary: "R204: Report a user"
      description: "Report a user. Access: USR"
      tags:
        - "M02: Individual Profile"
      parameters:
        - in: path
          name: id
          description: Id of the user to report
          schema:
            type: integer
          required: true
        - in: query
          name: reason
          description: Reason of the report
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "Ok. Report created."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."

  /api/user/notification/{id}:
    delete:
      operationId: R205
      summary: "R205: Delete a notication for a user"
      description: "Delete a notification. Access: USR"
      tags:
        - "M02: Individual Profile"
      parameters:
        - in: path
          name: id
          description: Id of the notification to delete
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "Ok. Notification deleted."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."

  ########################################
  #  M03: Content viewing and searching  #
  ########################################
  /home:
    get:
      operationId: R301
      summary: "R301: Home page"
      description: "Home page of the plaform specific question page. Access: PUB"
      tags:
        - "M03: Content viewing and searching"
      responses:
        "200":
          description: "Ok. Show [UI01](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui01-home)"

  /search:
    get:
      operationId: R302
      summary: "R302: Search page"
      description: "Search page the shows search results of the query previously inserted by the user. Access: PUB"
      tags:
        - "M03: Content viewing and searching"
      responses:
        "200":
          description: "Ok. Show [UI07](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui07-search-results-page)"

  /question/{id}:
    get:
      operationId: R306
      summary: "R306: Question page"
      description: "Present a specific question page. Access: PUB"
      tags:
        - "M03: Content viewing and searching"
      parameters:
        - name: id
          in: path
          description: Provided an unique id of a question, the main content related to the question will be fetched.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Ok. Show [UI08](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui08-question-page)"
        "404":
          description: "Error. Not found."

  /tag/{id}:
    get:
      operationId: R307
      summary: "R307: Tag page"
      description: "Present a specific tag page. Access: PUB"
      tags:
        - "M03: Content viewing and searching"
      parameters:
        - name: id
          in: path
          description: Provided an unique id of a tag, its description and associated questions will be fetched.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Ok. Show [UI09](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui09-tag-page)"
        "404":
          description: "Error. Not found."

  /api/search/question:
    get:
      operationId: R303
      summary: "R303: Search results for a question"
      description: "Search for questions using a query string and return result as JSON. Access: PUB"
      tags:
        - "M03: Content viewing and searching"
      parameters:
        - in: query
          name: query
          description: String to use for full-text search
          schema:
            type: string
          required: false
        - in: query
          name: author
          description: Id of the question's author
          schema:
            type: integer
          required: false
        - in: query
          name: tags
          description: Serialized list of tags
          schema:
            type: string
          required: false
        - in: query
          name: type
          description: Filtering type for the query. Can be "best", "new", "trending" or "bountied"
          schema:
            type: string
            enum: [best, new, trending, bountied]
          required: true
        - in: query
          name: rpp
          description: Results per page
          schema:
            type: integer
          required: true
        - in: query
          name: page
          description: Page number
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    main:
                      type: string
                    votes_difference:
                      type: integer
                    creation_date:
                      type: string
                    author:
                      type: string
                    edited:
                      type: boolean
                    tags:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                example:
                  - id: 10
                    title: How do I compare strings in Java
                    main: I don't kow how to use the == operator, it doesn't work, can someone help me?
                    votes_difference: 42
                    creation_date: 21/04/2021
                    author: mpintarolas
                    edited: false
                    tags:
                      - id: 1
                        name: java
                      - id: 2
                        name: programming
                      - id: 3
                        name: string
                  - id: 14
                    title: Why is windows so bad
                    main: It's constantly crashing, filled with bloatware, why is it like that?
                    votes_difference: -12
                    creation_date: 22/04/2021
                    author: jlopes
                    edited: false
                    tags:
                      - id: 1
                        name: windows
                      - id: 2
                        name: os
        "400":
          description: "Error. Bad request."

  /api/search/tag:
    get:
      operationId: R304
      summary: "R304: Search results for a tag"
      description: "Search for tags using a query string and return result as JSON. Access: PUB"
      tags:
        - "M03: Content viewing and searching"
      parameters:
        - in: query
          name: query
          description: String to use for full-text search
          schema:
            type: string
          required: true
        - in: query
          name: type
          description: Filtering type for the query. Can be "best", "new" or "trending"
          schema:
            type: string
            enum: [best, new, trending]
          required: false
        - in: query
          name: rpp
          description: Results per page
          schema:
            type: integer
          required: true
        - in: query
          name: page
          description: Page number
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    num_followers:
                      type: integer
                    num_questions:
                      type: integer
                example:
                  - id: 1
                    name: javascript
                    num_followers: 154
                    num_questions: 2758
                  - id: 2
                    name: java
                    num_followers: 46
                    num_questions: 842
        "400":
          description: "Error. Bad request."

  /api/search/user:
    get:
      operationId: R305
      summary: "R305: Search results for a user"
      description: "Search for users using a query string and return result as JSON. Access: PUB"
      tags:
        - "M03: Content viewing and searching"
      parameters:
        - in: query
          name: query
          description: String to use for full-text search
          schema:
            type: string
          required: true
        - in: query
          name: rpp
          description: Results per page
          schema:
            type: integer
          required: true
        - in: query
          name: page
          description: Page number
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    email:
                      type: string
                    reputation:
                      type: integer
                    join_date:
                      type: string
                    expert:
                      type: boolean
                    banned:
                      type: boolean
                example:
                  - name: jdiogueiro
                    email: jayjaydee@gmail.com
                    reputation: 1894
                    join_date: 10/10/2020
                    expert: true
                    banned: false
                  - name: mpintarolas
                    email: mpinto@gmail.com
                    reputation: 684
                    join_date: 2/11/2021
                    expert: false
                    banned: false
        "400":
          description: "Error. Bad request."

  ##############################
  #  M04: Content interaction  #
  ##############################

  /question/create:
    get:
      operationId: R401
      summary: "R401: Create question page"
      description: "Page to create a new question. Access: USR"
      tags:
        - "M04: Content interaction"
      responses:
        "200":
          description: "Ok. Show [UI08](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui06-ask-a-question)"

  /api/save/question:
    post:
      operationId: R402
      summary: "R402: Save a question"
      description: "Save a question. Access: USR"
      tags:
        - "M04: Content interaction"
      parameters:
        - name: id
          in: query
          description: Primary key of a question.
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Ok. Saved question."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."

  /api/follow/tag:
    post:
      operationId: R403
      summary: "R403: Follow a tag"
      description: "Follow a tag. Access: USR"
      tags:
        - "M04: Content interaction"
      parameters:
        - name: id
          in: query
          description: Primary key of a tag.
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Ok. Followed tag."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."

  /api/question/insert:
    post:
      operationId: R404
      summary: "R404: Insert a question"
      description: "Insert a question. Access: USR"
      tags:
        - "M04: Content interaction"
      parameters:
        - name: title
          in: query
          description: Title of the question.
          required: true
          schema:
            type: string
        - name: main
          in: query
          description: Main content of the question
          required: true
          schema:
            type: string
        - name: tags
          in: query
          description: Serialized list of tags
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Success. Inserted question."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "500":
          description: "Error. Internal server error."

  /api/question/{id}/edit:
    put:
      operationId: R407
      summary: "R407: Edit a question"
      description: "Edit a question. Access: OWN"
      tags:
        - "M04: Content interaction"
      parameters:
        - name: id
          description: Primary key of the question
          required: true
          in: path
          schema:
            type: integer
        - name: title
          in: query
          description: New title of the question.
          required: true
          schema:
            type: string
        - name: main
          in: query
          description: New main content of the question
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Ok. Successfuly edited question."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."
        "500":
          description: "Error. Internal server error."

  /api/question/{id}/delete:
    delete:
      operationId: R410
      summary: "R410: Delete question"
      description: "Delete question. Access: MOD, OWN"
      tags:
        - "M04: Content interaction"
      parameters:
        - in: path
          name: id
          description: Question's content id
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "Ok. Question deleted."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."

  /api/question/{id}/answer:
    post:
      operationId: R405
      summary: "R405: Insert an answer"
      description: "Insert an answer. Access: USR"
      tags:
        - "M04: Content interaction"
      parameters:
        - in: path
          name: id
          description: Question's content id
          schema:
            type: integer
          required: true
        - name: main
          in: query
          description: Main content of the answer
          required: true
          schema:
            type: string
      responses:
        "201":
          description: "Success. Inserted answer."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."
        "500":
          description: "Error. Internal server error."

  /api/answer/{id}/edit:
    put:
      operationId: R408
      summary: "R408: Edit an answer"
      description: "Edit an answer. Access: OWN"
      tags:
        - "M04: Content interaction"
      parameters:
        - name: id
          description: Primary key of the answer
          required: true
          in: path
          schema:
            type: integer
        - name: main
          in: query
          description: New main content of the answer
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Ok. Successfuly edited answer."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."
        "500":
          description: "Error. Internal server error."

  /api/answer/{id}/delete:
    delete:
      operationId: R411
      summary: "R411: Delete answer"
      description: "Delete answer. Access: MOD, OWN"
      tags:
        - "M04: Content interaction"
      parameters:
        - in: path
          name: id
          description: Answer's content id
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "Ok. Answer deleted."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."

  /api/comment/insert:
    post:
      operationId: R406
      summary: "R406: Insert a comment to a question"
      description: "Insert a comment to a question. Access: USR"
      tags:
        - "M04: Content interaction"
      parameters:
        - name: type
          in: query
          description: Type of comment (question or answer)
          required: true
          schema:
            type: string
            enum: [question, answer]
        - name: content_id
          in: query
          description: Primary key of the target question/answer.
          required: true
          schema:
            type: integer
        - name: main
          in: query
          description: Main content of the comment
          required: true
          schema:
            type: string
      responses:
        "201":
          description: "Success. Inserted comment."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."
        "500":
          description: "Error. Internal server error."

  /api/comment/{id}/edit:
    put:
      operationId: R409
      summary: "R409: Edit a comment"
      description: "Edit a comment. Access: OWN"
      tags:
        - "M04: Content interaction"
      parameters:
        - name: id
          description: Primary key of the comment
          required: true
          in: path
          schema:
            type: integer
        - name: main
          in: query
          description: New main content of the comment
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Ok. Successfuly edited comment."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."
        "500":
          description: "Error. Internal server error."

  /api/comment/{id}/delete:
    delete:
      operationId: R412
      summary: "R412: Delete a comment"
      description: "Delete comment. Access: MOD, OWN"
      tags:
        - "M04: Content interaction"
      parameters:
        - in: path
          name: id
          description: Comment's content id
          schema:
            type: integer
          required: true
        - name: type
          in: query
          description: Type of comment (question or answer)
          required: true
          schema:
            type: string
            enum: [question, answer]
      responses:
        "200":
          description: "Ok. Comment deleted."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."

  /api/question/{id}/vote:
    post:
      operationId: R413
      summary: "R413: Insert a vote to a question"
      description: "Insert vote. Access: USR"
      tags:
        - "M04: Content interaction"
      parameters:
        - in: path
          name: id
          description: Id of the question to vote
          schema:
            type: integer
          required: true
        - name: value
          in: query
          description: Value of the vote
          schema:
            type: boolean
          required: true
      responses:
        "200":
          description: "Ok. Vote inserted."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
    put:
      operationId: R414
      summary: "R414: Edit a vote to a question"
      description: "Edit vote. Access: USR"
      tags:
        - "M04: Content interaction"
      parameters:
        - in: path
          name: id
          description: Id of the question to vote
          schema:
            type: integer
          required: true
        - name: value
          in: query
          description: Value of the vote
          schema:
            type: boolean
          required: true
      responses:
        "200":
          description: "Ok. Vote edited."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."
    delete:
      operationId: R415
      summary: "R415: Delete a vote to a question"
      description: "Delete vote. Access: USR"
      tags:
        - "M04: Content interaction"
      parameters:
        - in: path
          name: id
          description: Id of the question to vote
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "Ok. Vote deleted."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."

  /api/answer/{id}/vote:
    post:
      operationId: R416
      summary: "R416: Insert a vote to an answer"
      description: "Insert vote. Access: USR"
      tags:
        - "M04: Content interaction"
      parameters:
        - in: path
          name: id
          description: Id of the answer to vote
          schema:
            type: integer
          required: true
        - name: value
          in: query
          description: Value of the vote
          schema:
            type: boolean
          required: true
      responses:
        "200":
          description: "Ok. Vote inserted."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
    put:
      operationId: R417
      summary: "R417: Edit a vote to an answer"
      description: "Edit vote. Access: USR"
      tags:
        - "M04: Content interaction"
      parameters:
        - in: path
          name: id
          description: Id of the answer to vote
          schema:
            type: integer
          required: true
        - name: value
          in: query
          description: Value of the vote
          schema:
            type: boolean
          required: true
      responses:
        "200":
          description: "Ok. Vote edited."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
    delete:
      operationId: R418
      summary: "R418: Delete a vote to an answer"
      description: "Delete vote. Access: USR"
      tags:
        - "M04: Content interaction"
      parameters:
        - in: path
          name: id
          description: Id of the answer to vote
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "Ok. Vote deleted."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."

  /api/answer/{id}/best:
    post:
      operationId: R419
      summary: "R419: Elect an answer as the best for a question"
      description: "Elect answer as the best. Access: OWN"
      tags:
        - "M04: Content interaction"
      parameters:
        - in: path
          name: id
          description: Id of the answer to elect
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "Ok. Answer elected."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."
    put:
      operationId: R420
      summary: "R420: Edit the election of an answer as the best for a question"
      description: "Edit an election of the best answer. Access: OWN"
      tags:
        - "M04: Content interaction"
      parameters:
        - in: path
          name: id
          description: Id of the answer to elect
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "Ok. Answer election edited."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."
    delete:
      operationId: R421
      summary: "R421: Delete the election of an answer as the best for a question"
      description: "Delete an election of the best answer. Access: OWN"
      tags:
        - "M04: Content interaction"
      parameters:
        - in: path
          name: id
          description: Id of the elected answer to "diselect"
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "Ok. Answer election deleted."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."

  /api/content/{id}/report:
    post:
      operationId: R422
      summary: "R422: Report a content"
      description: "Report a content. Access: USR"
      tags:
        - "M04: Content interaction"
      parameters:
        - in: path
          name: id
          description: Id of the content to report
          schema:
            type: integer
          required: true
        - in: query
          name: reason
          description: Reason of the report
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "Ok. Report created."
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."

  #####################
  #  M05: Moderation  #
  #####################
  /moderator:
    get:
      operationId: R501
      summary: "R501: Moderator page"
      description: "Show moderation area. Access: MOD"
      tags:
        - "M05: Moderation"
      responses:
        "200":
          description: "Ok. Show [UI13](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui13-user-moderation)"
        "401":
          description: "Error. Unauthorized."

  /api/ban:
    post:
      operationId: R502
      summary: "R502: Ban user"
      description: "Ban a user. Access: MOD"
      tags:
        - "M05: Moderation"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        "200":
          description: "Ok. User banned."
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The banned user name.
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."

  /api/delete/tag/{id}:
    delete:
      operationId: R503
      summary: "R503: Delete tag"
      description: "Delete tag. Access: MOD"
      tags:
        - "M05: Moderation"
      parameters:
        - in: path
          name: id
          description: Tag id
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "Ok. Tag deleted."
          content:
            application/json:
              schema:
                type: object
                properties:
                  tag_id:
                    type: integer
                    description: The deleted tag id.
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."

  /api/edit/tag:
    patch:
      operationId: R504
      summary: "R504: Edit tag"
      description: "Edit tag. Access: MOD"
      tags:
        - "M05: Moderation"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                  description: Updated tag name
                description:
                  type: string
                  description: Updated tag description
              required:
                - id
                - name
      responses:
        "200":
          description: "Ok. Tag deleted."
          content:
            application/json:
              schema:
                type: object
                properties:
                  tag_id:
                    type: integer
                    description: The deleted tag id.
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."

  /api/remove/tag:
    delete:
      operationId: R505
      summary: "R505: Remove tag"
      description: "Remove tag from question. Access: MOD"
      tags:
        - "M05: Moderation"
      parameters:
        - in: query
          name: tag_id
          description: Tag id
          schema:
            type: integer
          required: true
        - in: query
          name: question_id
          description: Question id
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "Ok. Tag removed from Question."
          content:
            application/json:
              schema:
                type: object
                properties:
                  tag_id:
                    type: integer
                    description: The removed tag id.
                  question_id:
                    type: integer
                    description: The question id tag was removed from.
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."

  /api/add/tag:
    post:
      operationId: R506
      summary: "R506: Add tag"
      description: "Add tag to question. Access: MOD"
      tags:
        - "M05: Moderation"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                  description: Updated tag name
                description:
                  type: string
                  description: Updated tag description
              required:
                - id
                - name
      responses:
        "200":
          description: "Ok. Tag associated to Question."
          content:
            application/json:
              schema:
                type: object
                properties:
                  tag_id:
                    type: integer
                    description: The question id tag was added to.
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."
        "404":
          description: "Error. Not found."

  /api/user_reports:
    get:
      operationId: R507
      summary: "R507: User reports"
      description: "Get user reports and return result as JSON. Access: MOD"
      tags:
        - "M05: Moderation"
      parameters:
        - in: query
          name: query
          description: String to use for full-text search
          schema:
            type: string
          required: false
        - in: query
          name: solved
          description: States if the report is solved
          schema:
            type: boolean
          required: false
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    description:
                      type: string
                    solved:
                      type: boolean
                    reporter_id:
                      type: integer
                    solver_id:
                      type: integer
                    user_id:
                      type: integer
                example:
                  - id: 10
                    description: Bad behaviour
                    solved: false
                    reporter_id: 3
                    solver_id: 1
                    user_id: null
                  - id: 14
                    description: Good Moaning
                    solved: true
                    reporter_id: 3
                    solver_id: 1
                    user_id: 2
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "403":
          description: "Error. Forbidden."

  /api/content_reports:
    get:
      operationId: R508
      summary: "R508: Content reports"
      description: "Get content reports and return result ad JSON. Access: MOD"
      tags:
        - "M05: Moderation"
      parameters:
        - in: query
          name: query
          description: String to use for full-text search
          schema:
            type: string
          required: false
        - in: query
          name: solved
          description: States if the report is solved
          schema:
            type: boolean
          required: false
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    description:
                      type: string
                    solved:
                      type: boolean
                    reporter_id:
                      type: integer
                    solver_id:
                      type: integer
                    user_id:
                      type: integer
                example:
                  - id: 9
                    description: Is not useful
                    solved: false
                    reporter_id: 3
                    solver_id: 1
                    content_id: 5
                  - id: 11
                    description: Did not learn anything
                    solved: true
                    reporter_id: 3
                    solver_id: 1
                    content_id: 5
        "400":
          description: "Error. Bad request."
        "401":
          description: "Error. Unauthorized."
        "404":
          description: "Error. Not found."

  #######################
  #  M06: Static Pages  #
  #######################
  /about:
    get:
      operationId: R601
      summary: "R601: About page"
      description: "Show about page. Access: PUB"
      tags:
        - "M06: Static Pages"
      responses:
        "200":
          description: "Ok. Show [UI02](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui02-about)"

  /faq:
    get:
      operationId: R602
      summary: "R602: FAQ Page"
      description: "Show FAQ page. Access: PUB"
      tags:
        - "M06: Static Pages"
      responses:
        "200":
          description: "Ok. Show [UI03](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui03-faq)"

  /error:
    get:
      operationId: R603
      summary: "R603: Error page"
      description: "Error page on bad request. Access: PUB"
      tags:
        - "M06: Static Pages"
      responses:
        "200":
          description: "Ok. Show [UI14](https://git.fe.up.pt/lbaw/lbaw2021/lbaw2132/-/wikis/er#ui14-404)"
